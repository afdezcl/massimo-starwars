{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/marbles-glossary.ts","webpack:///./src/notification-event.ts","webpack:///./src/notification-kind.ts","webpack:///./src/marblizer.ts","webpack:///./src/jest/custom-matchers.ts","webpack:///./src/rxjs/assert-deep-equal.ts","webpack:///./src/rxjs/scheduler.ts","webpack:///./src/rxjs/cold-observable.ts","webpack:///./src/rxjs/hot-observable.ts","webpack:///./src/rxjs/strip-alignment-chars.ts","webpack:///./index.ts","webpack:///external \"expect/build/jasmineUtils\"","webpack:///external \"jest-diff\"","webpack:///external \"jest-matcher-utils\"","webpack:///external \"rxjs\"","webpack:///external \"rxjs/internal/testing/SubscriptionLog\"","webpack:///external \"rxjs/internal/testing/TestScheduler\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export enum MarblesGlossary {\n  Completion = '|',\n  Error = '#',\n  TimeFrame = '-',\n  Subscription = '^',\n  Unsubscription = '!',\n  GroupStart = '(',\n  GroupEnd = ')',\n}\n","export class NotificationEvent {\n  marbles = '';\n  constructor(public start: number) {}\n  get end(): number {\n    return this.start + this.marbles.length;\n  }\n}\n","import { MarblesGlossary } from './marbles-glossary';\nimport { Notification } from 'rxjs';\nexport const ValueLiteral = {};\n\nexport type NotificationKind = Notification<any>['kind'];\n\nexport const NotificationKindChars: { [key in NotificationKind]: any } = {\n  N: ValueLiteral,\n  C: MarblesGlossary.Completion,\n  E: MarblesGlossary.Error,\n};\n","import { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\nimport { TestMessage } from 'rxjs/internal/testing/TestMessage';\nimport { MarblesGlossary } from './marbles-glossary';\nimport { NotificationEvent } from './notification-event';\nimport { NotificationKindChars, ValueLiteral } from './notification-kind';\n\nconst frameStep = 10;\n\nexport class Marblizer {\n  public static marblize(messages: TestMessage[]): string {\n    const emissions = Marblizer.getNotificationEvents(messages);\n    let marbles = '';\n    for (let i = 0, prevEndFrame = 0; i < emissions.length; prevEndFrame = emissions[i].end, i++) {\n      marbles = `${marbles}${MarblesGlossary.TimeFrame.repeat(emissions[i].start - prevEndFrame) +\n        emissions[i].marbles}`;\n    }\n    return marbles;\n  }\n\n  public static marblizeSubscriptions(logs: SubscriptionLog[]): string[] {\n    return logs.map(\n      log =>\n        MarblesGlossary.TimeFrame.repeat(log.subscribedFrame / frameStep) +\n        MarblesGlossary.Subscription +\n        MarblesGlossary.TimeFrame.repeat((log.unsubscribedFrame - log.subscribedFrame) / frameStep - 1) +\n        MarblesGlossary.Unsubscription\n    );\n  }\n\n  private static getNotificationEvents(messages: TestMessage[]) {\n    const framesToEmissions = messages.reduce<{ [frame: number]: NotificationEvent }>((result, message) => {\n      if (!result[message.frame]) {\n        result[message.frame] = new NotificationEvent(message.frame / frameStep);\n      }\n      const event = result[message.frame];\n      event.marbles += Marblizer.extractMarble(message);\n      return result;\n    }, {});\n\n    const events = Object.keys(framesToEmissions).map<NotificationEvent>(frame => framesToEmissions[frame]);\n\n    Marblizer.encloseGroupEvents(events);\n    return events;\n  }\n\n  private static extractMarble(message: TestMessage) {\n    let marble = NotificationKindChars[message.notification.kind];\n    if (marble === ValueLiteral) marble = message.notification.value;\n    return marble;\n  }\n\n  private static encloseGroupEvents(events: NotificationEvent[]) {\n    events.forEach(event => {\n      if (event.marbles.length > 1) {\n        event.marbles = `${MarblesGlossary.GroupStart}${event.marbles}${MarblesGlossary.GroupEnd}`;\n      }\n    });\n  }\n}\n","import { equals } from 'expect/build/jasmineUtils';\nimport * as diff from 'jest-diff';\nimport { matcherHint, printExpected, printReceived } from 'jest-matcher-utils';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\nimport { TestMessage } from 'rxjs/internal/testing/TestMessage';\nimport { Marblizer } from '../marblizer';\n\nfunction canMarblize(...messages: TestMessage[][]) {\n  return messages.every(message => message.filter(({ notification: { kind } }) => kind === 'N').every(isCharacter));\n}\n\nfunction isCharacter({ notification: { value } }: TestMessage): boolean {\n  return (\n    (typeof value === 'string' && value.length === 1) || (value !== undefined && JSON.stringify(value).length === 1)\n  );\n}\n\nexport const customTestMatchers = {\n  toBeNotifications(actual: TestMessage[], expected: TestMessage[]) {\n    let actualMarble: string | TestMessage[] = actual;\n    let expectedMarble: string | TestMessage[] = expected;\n    if (canMarblize(actual, expected)) {\n      actualMarble = Marblizer.marblize(actual);\n      expectedMarble = Marblizer.marblize(expected);\n    }\n\n    const pass = equals(actualMarble, expectedMarble);\n\n    const message = pass\n      ? () =>\n          matcherHint('.not.toBeNotifications') +\n          '\\n\\n' +\n          `Expected notifications to not be:\\n` +\n          `  ${printExpected(expectedMarble)}\\n` +\n          `But got:\\n` +\n          `  ${printReceived(actualMarble)}`\n      : () => {\n          const diffString = diff(expectedMarble, actualMarble, {\n            expand: true,\n          });\n          return (\n            matcherHint('.toBeNotifications') +\n            '\\n\\n' +\n            `Expected notifications to be:\\n` +\n            `  ${printExpected(expectedMarble)}\\n` +\n            `But got:\\n` +\n            `  ${printReceived(actualMarble)}` +\n            (diffString ? `\\n\\nDifference:\\n\\n${diffString}` : '')\n          );\n        };\n\n    return { actual, message, pass };\n  },\n\n  toBeSubscriptions(actual: SubscriptionLog[], expected: SubscriptionLog[]) {\n    const actualMarbleArray = Marblizer.marblizeSubscriptions(actual);\n    const expectedMarbleArray = Marblizer.marblizeSubscriptions(expected);\n\n    const pass = subscriptionsPass(actualMarbleArray, expectedMarbleArray);\n    const message = pass\n      ? () =>\n          matcherHint('.not.toHaveSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to not have the following subscription points:\\n` +\n          `  ${printExpected(expectedMarbleArray)}\\n` +\n          `But got:\\n` +\n          `  ${printReceived(actualMarbleArray)}`\n      : () => {\n          const diffString = diff(expectedMarbleArray, actualMarbleArray, {\n            expand: true,\n          });\n          return (\n            matcherHint('.toHaveSubscriptions') +\n            '\\n\\n' +\n            `Expected observable to have the following subscription points:\\n` +\n            `  ${printExpected(expectedMarbleArray)}\\n` +\n            `But got:\\n` +\n            `  ${printReceived(actualMarbleArray)}` +\n            (diffString ? `\\n\\nDifference:\\n\\n${diffString}` : '')\n          );\n        };\n\n    return { actual, message, pass };\n  },\n\n  toHaveEmptySubscriptions(actual: SubscriptionLog[] | undefined) {\n    const pass = !(actual && actual.length > 0);\n    let marbles: string[];\n    if (actual && actual.length > 0) {\n      marbles = Marblizer.marblizeSubscriptions(actual);\n    }\n    const message = pass\n      ? () =>\n          matcherHint('.not.toHaveNoSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to have at least one subscription point, but got nothing` +\n          printReceived('')\n      : () =>\n          matcherHint('.toHaveNoSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to have no subscription points\\n` +\n          `But got:\\n` +\n          `  ${printReceived(marbles)}\\n\\n`;\n    return { actual, message, pass };\n  },\n};\n\nfunction subscriptionsPass(actualMarbleArray: string[], expectedMarbleArray: string[]): boolean {\n  if (actualMarbleArray.length !== expectedMarbleArray.length) {\n    return false;\n  }\n  let pass = true;\n  for (const actualMarble of actualMarbleArray) {\n    if (!expectedMarbleArray.includes(actualMarble)) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n}\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R, T> {\n      toBeNotifications(notifications: TestMessage[]): void;\n\n      toBeSubscriptions(subscriptions: SubscriptionLog[]): void;\n\n      toHaveEmptySubscriptions(): void;\n    }\n  }\n}\n\nexpect.extend(customTestMatchers);\n","import { TestMessage } from 'rxjs/internal/testing/TestMessage';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\nimport '../jest/custom-matchers';\n\nexport type MessageOrSubscription = TestMessage[] | SubscriptionLog[];\n\nfunction expectedIsSubscriptionLogArray(\n  actual: MessageOrSubscription,\n  expected: MessageOrSubscription\n): expected is SubscriptionLog[] {\n  return (\n    (actual.length === 0 && expected.length === 0) || (expected.length !== 0 && expected[0] instanceof SubscriptionLog)\n  );\n}\n\nfunction actualIsSubscriptionsAndExpectedIsEmpty(\n  actual: MessageOrSubscription,\n  expected: MessageOrSubscription\n): actual is SubscriptionLog[] {\n  return expected.length === 0 && actual.length !== 0 && actual[0] instanceof SubscriptionLog;\n}\n\nexport function assertDeepEqual(actual: MessageOrSubscription, expected: MessageOrSubscription) {\n  if (!expected) return;\n  if (actualIsSubscriptionsAndExpectedIsEmpty(actual, expected)) {\n    expect(actual).toHaveEmptySubscriptions();\n  } else if (expectedIsSubscriptionLogArray(actual, expected)) {\n    expect(actual).toBeSubscriptions(expected);\n  } else {\n    expect(actual).toBeNotifications(expected);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { TestMessage } from 'rxjs/internal/testing/TestMessage';\nimport { TestScheduler } from 'rxjs/internal/testing/TestScheduler';\n\nimport { assertDeepEqual } from './assert-deep-equal';\n\nexport class Scheduler {\n  public static instance: TestScheduler | null;\n\n  public static init(): void {\n    Scheduler.instance = new TestScheduler(assertDeepEqual);\n  }\n\n  public static get(): TestScheduler {\n    if (Scheduler.instance) {\n      return Scheduler.instance;\n    }\n    throw new Error('Scheduler is not initialized');\n  }\n\n  public static reset(): void {\n    Scheduler.instance = null;\n  }\n\n  public static materializeInnerObservable(observable: Observable<any>, outerFrame: number): TestMessage[] {\n    const scheduler = Scheduler.get();\n    // @ts-ignore\n    return scheduler.materializeInnerObservable(observable, outerFrame);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ColdObservable as RxJsColdObservable } from 'rxjs/internal/testing/ColdObservable';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\n\nimport { Scheduler } from './scheduler';\n\nexport class ColdObservable extends Observable<any> {\n  source: RxJsColdObservable<any>;\n  constructor(public marbles: string, public values?: any[], public error?: any) {\n    super();\n\n    this.source = Scheduler.get().createColdObservable(marbles, values, error);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return this.source.subscriptions;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { HotObservable as RxJsHotObservable } from 'rxjs/internal/testing/HotObservable';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\n\nimport { Scheduler } from './scheduler';\n\nexport class HotObservable extends Observable<any> {\n  source: RxJsHotObservable<any>;\n  constructor(public marbles: string, public values?: any[], public error?: any) {\n    super();\n\n    this.source = Scheduler.get().createHotObservable(marbles, values, error);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return this.source.subscriptions;\n  }\n}\n","export function stripAlignmentChars(marbles: string) {\n  return marbles.replace(/^[ ]+/, '');\n}\n","import { ColdObservable } from './src/rxjs/cold-observable';\r\nimport { HotObservable } from './src/rxjs/hot-observable';\r\nimport { Scheduler } from './src/rxjs/scheduler';\r\nimport { stripAlignmentChars } from './src/rxjs/strip-alignment-chars';\r\n\r\nexport type ObservableWithSubscriptions = ColdObservable | HotObservable;\r\n\r\nexport { Scheduler } from './src/rxjs/scheduler';\r\n\r\ndeclare global {\r\n  namespace jest {\r\n    interface Matchers<R, T> {\r\n      toBeObservable(observable: ObservableWithSubscriptions): void;\r\n\r\n      toHaveSubscriptions(marbles: string | string[]): void;\r\n\r\n      toHaveNoSubscriptions(): void;\r\n\r\n      toBeMarble(marble: string): void;\r\n\r\n      toSatisfyOnFlush(func: () => void): void;\r\n    }\r\n  }\r\n}\r\n\r\nexport function hot(marbles: string, values?: any, error?: any): HotObservable {\r\n  return new HotObservable(stripAlignmentChars(marbles), values, error);\r\n}\r\n\r\nexport function cold(marbles: string, values?: any, error?: any): ColdObservable {\r\n  return new ColdObservable(stripAlignmentChars(marbles), values, error);\r\n}\r\n\r\nexport function time(marbles: string): number {\r\n  return Scheduler.get().createTime(stripAlignmentChars(marbles));\r\n}\r\n\r\nconst dummyResult = {\r\n  message: () => '',\r\n  pass: true\r\n};\r\n\r\nexpect.extend({\r\n\r\n  toHaveSubscriptions(actual: ObservableWithSubscriptions, marbles: string | string[]) {\r\n    const sanitizedMarbles = Array.isArray(marbles) ? marbles.map(stripAlignmentChars) : stripAlignmentChars(marbles);\r\n    Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe(sanitizedMarbles);\r\n    return dummyResult;\r\n  },\r\n\r\n  toHaveNoSubscriptions(actual: ObservableWithSubscriptions) {\r\n    Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe([]);\r\n    return dummyResult;\r\n  },\r\n\r\n  toBeObservable(actual, expected: ObservableWithSubscriptions) {\r\n    Scheduler.get().expectObservable(actual).toBe(expected.marbles, expected.values, expected.error);\r\n    return dummyResult;\r\n  },\r\n\r\n  toBeMarble(actual: ObservableWithSubscriptions, marbles: string) {\r\n    Scheduler.get().expectObservable(actual).toBe(stripAlignmentChars(marbles));\r\n    return dummyResult;\r\n  },\r\n\r\n  toSatisfyOnFlush(actual: ObservableWithSubscriptions, func: () => void) {\r\n    Scheduler.get().expectObservable(actual);\r\n    // tslint:disable:no-string-literal\r\n    const flushTests = Scheduler.get()['flushTests'];\r\n    flushTests[flushTests.length - 1].ready = true;\r\n    onFlush.push(func);\r\n    return dummyResult;\r\n  }\r\n});\r\n\r\nlet onFlush: (() => void)[] = [];\r\n\r\nbeforeEach(() => { Scheduler.init(); onFlush = []; });\r\nafterEach(() => {\r\n  Scheduler.get().flush();\r\n  while (onFlush.length > 0) {\r\n    // @ts-ignore\r\n    onFlush.shift()();\r\n  }\r\n  Scheduler.reset();\r\n});\r\n","module.exports = expect/build/jasmineUtils;","module.exports = jest-diff;","module.exports = jest-matcher-utils;","module.exports = rxjs;","module.exports = rxjs/internal/testing/SubscriptionLog;","module.exports = rxjs/internal/testing/TestScheduler;"],"sourceRoot":""}