(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("expect/build/jasmineUtils"), require("jest-diff"), require("jest-matcher-utils"), require("rxjs"), require("rxjs/internal/testing/SubscriptionLog"), require("rxjs/internal/testing/TestScheduler"));
	else if(typeof define === 'function' && define.amd)
		define("JestMarbles", ["expect/build/jasmineUtils", "jest-diff", "jest-matcher-utils", "rxjs", "rxjs/internal/testing/SubscriptionLog", "rxjs/internal/testing/TestScheduler"], factory);
	else if(typeof exports === 'object')
		exports["JestMarbles"] = factory(require("expect/build/jasmineUtils"), require("jest-diff"), require("jest-matcher-utils"), require("rxjs"), require("rxjs/internal/testing/SubscriptionLog"), require("rxjs/internal/testing/TestScheduler"));
	else
		root["JestMarbles"] = factory(root["expect/build/jasmineUtils"], root["jest-diff"], root["jest-matcher-utils"], root["rxjs"], root["rxjs/internal/testing/SubscriptionLog"], root["rxjs/internal/testing/TestScheduler"]);
})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE_expect_build_jasmineUtils__, __WEBPACK_EXTERNAL_MODULE_jest_diff__, __WEBPACK_EXTERNAL_MODULE_jest_matcher_utils__, __WEBPACK_EXTERNAL_MODULE_rxjs__, __WEBPACK_EXTERNAL_MODULE_rxjs_internal_testing_SubscriptionLog__, __WEBPACK_EXTERNAL_MODULE_rxjs_internal_testing_TestScheduler__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.ts":
/*!*******************************!*\
  !*** ./index.ts + 10 modules ***!
  \*******************************/
/*! exports provided: Scheduler, hot, cold, time */
/*! ModuleConcatenation bailout: Cannot concat with external "expect/build/jasmineUtils" (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with external "jest-matcher-utils" (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with external "rxjs" (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with external "rxjs/internal/testing/SubscriptionLog" (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with external "rxjs/internal/testing/TestScheduler" (<- Module is not an ECMAScript module) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "rxjs"
var external_rxjs_ = __webpack_require__("rxjs");

// EXTERNAL MODULE: external "rxjs/internal/testing/TestScheduler"
var TestScheduler_ = __webpack_require__("rxjs/internal/testing/TestScheduler");

// EXTERNAL MODULE: external "rxjs/internal/testing/SubscriptionLog"
var SubscriptionLog_ = __webpack_require__("rxjs/internal/testing/SubscriptionLog");

// EXTERNAL MODULE: external "expect/build/jasmineUtils"
var jasmineUtils_ = __webpack_require__("expect/build/jasmineUtils");

// EXTERNAL MODULE: external "jest-diff"
var external_jest_diff_ = __webpack_require__("jest-diff");

// EXTERNAL MODULE: external "jest-matcher-utils"
var external_jest_matcher_utils_ = __webpack_require__("jest-matcher-utils");

// CONCATENATED MODULE: ./src/marbles-glossary.ts
var MarblesGlossary;
(function (MarblesGlossary) {
    MarblesGlossary["Completion"] = "|";
    MarblesGlossary["Error"] = "#";
    MarblesGlossary["TimeFrame"] = "-";
    MarblesGlossary["Subscription"] = "^";
    MarblesGlossary["Unsubscription"] = "!";
    MarblesGlossary["GroupStart"] = "(";
    MarblesGlossary["GroupEnd"] = ")";
})(MarblesGlossary || (MarblesGlossary = {}));

// CONCATENATED MODULE: ./src/notification-event.ts
var NotificationEvent = /** @class */ (function () {
    function NotificationEvent(start) {
        this.start = start;
        this.marbles = '';
    }
    Object.defineProperty(NotificationEvent.prototype, "end", {
        get: function () {
            return this.start + this.marbles.length;
        },
        enumerable: true,
        configurable: true
    });
    return NotificationEvent;
}());


// CONCATENATED MODULE: ./src/notification-kind.ts

var ValueLiteral = {};
var NotificationKindChars = {
    N: ValueLiteral,
    C: MarblesGlossary.Completion,
    E: MarblesGlossary.Error,
};

// CONCATENATED MODULE: ./src/marblizer.ts



var frameStep = 10;
var marblizer_Marblizer = /** @class */ (function () {
    function Marblizer() {
    }
    Marblizer.marblize = function (messages) {
        var emissions = Marblizer.getNotificationEvents(messages);
        var marbles = '';
        for (var i = 0, prevEndFrame = 0; i < emissions.length; prevEndFrame = emissions[i].end, i++) {
            marbles = "" + marbles + (MarblesGlossary.TimeFrame.repeat(emissions[i].start - prevEndFrame) +
                emissions[i].marbles);
        }
        return marbles;
    };
    Marblizer.marblizeSubscriptions = function (logs) {
        return logs.map(function (log) {
            return MarblesGlossary.TimeFrame.repeat(log.subscribedFrame / frameStep) +
                MarblesGlossary.Subscription +
                MarblesGlossary.TimeFrame.repeat((log.unsubscribedFrame - log.subscribedFrame) / frameStep - 1) +
                MarblesGlossary.Unsubscription;
        });
    };
    Marblizer.getNotificationEvents = function (messages) {
        var framesToEmissions = messages.reduce(function (result, message) {
            if (!result[message.frame]) {
                result[message.frame] = new NotificationEvent(message.frame / frameStep);
            }
            var event = result[message.frame];
            event.marbles += Marblizer.extractMarble(message);
            return result;
        }, {});
        var events = Object.keys(framesToEmissions).map(function (frame) { return framesToEmissions[frame]; });
        Marblizer.encloseGroupEvents(events);
        return events;
    };
    Marblizer.extractMarble = function (message) {
        var marble = NotificationKindChars[message.notification.kind];
        if (marble === ValueLiteral)
            marble = message.notification.value;
        return marble;
    };
    Marblizer.encloseGroupEvents = function (events) {
        events.forEach(function (event) {
            if (event.marbles.length > 1) {
                event.marbles = "" + MarblesGlossary.GroupStart + event.marbles + MarblesGlossary.GroupEnd;
            }
        });
    };
    return Marblizer;
}());


// CONCATENATED MODULE: ./src/jest/custom-matchers.ts




function canMarblize() {
    var messages = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        messages[_i] = arguments[_i];
    }
    return messages.every(function (message) { return message.filter(function (_a) {
        var kind = _a.notification.kind;
        return kind === 'N';
    }).every(isCharacter); });
}
function isCharacter(_a) {
    var value = _a.notification.value;
    return ((typeof value === 'string' && value.length === 1) || (value !== undefined && JSON.stringify(value).length === 1));
}
var customTestMatchers = {
    toBeNotifications: function (actual, expected) {
        var actualMarble = actual;
        var expectedMarble = expected;
        if (canMarblize(actual, expected)) {
            actualMarble = marblizer_Marblizer.marblize(actual);
            expectedMarble = marblizer_Marblizer.marblize(expected);
        }
        var pass = Object(jasmineUtils_["equals"])(actualMarble, expectedMarble);
        var message = pass
            ? function () {
                return Object(external_jest_matcher_utils_["matcherHint"])('.not.toBeNotifications') +
                    '\n\n' +
                    "Expected notifications to not be:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printExpected"])(expectedMarble) + "\n") +
                    "But got:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printReceived"])(actualMarble));
            }
            : function () {
                var diffString = external_jest_diff_(expectedMarble, actualMarble, {
                    expand: true,
                });
                return (Object(external_jest_matcher_utils_["matcherHint"])('.toBeNotifications') +
                    '\n\n' +
                    "Expected notifications to be:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printExpected"])(expectedMarble) + "\n") +
                    "But got:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printReceived"])(actualMarble)) +
                    (diffString ? "\n\nDifference:\n\n" + diffString : ''));
            };
        return { actual: actual, message: message, pass: pass };
    },
    toBeSubscriptions: function (actual, expected) {
        var actualMarbleArray = marblizer_Marblizer.marblizeSubscriptions(actual);
        var expectedMarbleArray = marblizer_Marblizer.marblizeSubscriptions(expected);
        var pass = subscriptionsPass(actualMarbleArray, expectedMarbleArray);
        var message = pass
            ? function () {
                return Object(external_jest_matcher_utils_["matcherHint"])('.not.toHaveSubscriptions') +
                    '\n\n' +
                    "Expected observable to not have the following subscription points:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printExpected"])(expectedMarbleArray) + "\n") +
                    "But got:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printReceived"])(actualMarbleArray));
            }
            : function () {
                var diffString = external_jest_diff_(expectedMarbleArray, actualMarbleArray, {
                    expand: true,
                });
                return (Object(external_jest_matcher_utils_["matcherHint"])('.toHaveSubscriptions') +
                    '\n\n' +
                    "Expected observable to have the following subscription points:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printExpected"])(expectedMarbleArray) + "\n") +
                    "But got:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printReceived"])(actualMarbleArray)) +
                    (diffString ? "\n\nDifference:\n\n" + diffString : ''));
            };
        return { actual: actual, message: message, pass: pass };
    },
    toHaveEmptySubscriptions: function (actual) {
        var pass = !(actual && actual.length > 0);
        var marbles;
        if (actual && actual.length > 0) {
            marbles = marblizer_Marblizer.marblizeSubscriptions(actual);
        }
        var message = pass
            ? function () {
                return Object(external_jest_matcher_utils_["matcherHint"])('.not.toHaveNoSubscriptions') +
                    '\n\n' +
                    "Expected observable to have at least one subscription point, but got nothing" +
                    Object(external_jest_matcher_utils_["printReceived"])('');
            }
            : function () {
                return Object(external_jest_matcher_utils_["matcherHint"])('.toHaveNoSubscriptions') +
                    '\n\n' +
                    "Expected observable to have no subscription points\n" +
                    "But got:\n" +
                    ("  " + Object(external_jest_matcher_utils_["printReceived"])(marbles) + "\n\n");
            };
        return { actual: actual, message: message, pass: pass };
    },
};
function subscriptionsPass(actualMarbleArray, expectedMarbleArray) {
    if (actualMarbleArray.length !== expectedMarbleArray.length) {
        return false;
    }
    var pass = true;
    for (var _i = 0, actualMarbleArray_1 = actualMarbleArray; _i < actualMarbleArray_1.length; _i++) {
        var actualMarble = actualMarbleArray_1[_i];
        if (!expectedMarbleArray.includes(actualMarble)) {
            pass = false;
            break;
        }
    }
    return pass;
}
expect.extend(customTestMatchers);

// CONCATENATED MODULE: ./src/rxjs/assert-deep-equal.ts


function expectedIsSubscriptionLogArray(actual, expected) {
    return ((actual.length === 0 && expected.length === 0) || (expected.length !== 0 && expected[0] instanceof SubscriptionLog_["SubscriptionLog"]));
}
function actualIsSubscriptionsAndExpectedIsEmpty(actual, expected) {
    return expected.length === 0 && actual.length !== 0 && actual[0] instanceof SubscriptionLog_["SubscriptionLog"];
}
function assertDeepEqual(actual, expected) {
    if (!expected)
        return;
    if (actualIsSubscriptionsAndExpectedIsEmpty(actual, expected)) {
        expect(actual).toHaveEmptySubscriptions();
    }
    else if (expectedIsSubscriptionLogArray(actual, expected)) {
        expect(actual).toBeSubscriptions(expected);
    }
    else {
        expect(actual).toBeNotifications(expected);
    }
}

// CONCATENATED MODULE: ./src/rxjs/scheduler.ts


var scheduler_Scheduler = /** @class */ (function () {
    function Scheduler() {
    }
    Scheduler.init = function () {
        Scheduler.instance = new TestScheduler_["TestScheduler"](assertDeepEqual);
    };
    Scheduler.get = function () {
        if (Scheduler.instance) {
            return Scheduler.instance;
        }
        throw new Error('Scheduler is not initialized');
    };
    Scheduler.reset = function () {
        Scheduler.instance = null;
    };
    Scheduler.materializeInnerObservable = function (observable, outerFrame) {
        var scheduler = Scheduler.get();
        // @ts-ignore
        return scheduler.materializeInnerObservable(observable, outerFrame);
    };
    return Scheduler;
}());


// CONCATENATED MODULE: ./src/rxjs/cold-observable.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var cold_observable_ColdObservable = /** @class */ (function (_super) {
    __extends(ColdObservable, _super);
    function ColdObservable(marbles, values, error) {
        var _this = _super.call(this) || this;
        _this.marbles = marbles;
        _this.values = values;
        _this.error = error;
        _this.source = scheduler_Scheduler.get().createColdObservable(marbles, values, error);
        return _this;
    }
    ColdObservable.prototype.getSubscriptions = function () {
        return this.source.subscriptions;
    };
    return ColdObservable;
}(external_rxjs_["Observable"]));


// CONCATENATED MODULE: ./src/rxjs/hot-observable.ts
var hot_observable_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var hot_observable_HotObservable = /** @class */ (function (_super) {
    hot_observable_extends(HotObservable, _super);
    function HotObservable(marbles, values, error) {
        var _this = _super.call(this) || this;
        _this.marbles = marbles;
        _this.values = values;
        _this.error = error;
        _this.source = scheduler_Scheduler.get().createHotObservable(marbles, values, error);
        return _this;
    }
    HotObservable.prototype.getSubscriptions = function () {
        return this.source.subscriptions;
    };
    return HotObservable;
}(external_rxjs_["Observable"]));


// CONCATENATED MODULE: ./src/rxjs/strip-alignment-chars.ts
function stripAlignmentChars(marbles) {
    return marbles.replace(/^[ ]+/, '');
}

// CONCATENATED MODULE: ./index.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hot", function() { return hot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cold", function() { return cold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "time", function() { return time; });
/* concated harmony reexport Scheduler */__webpack_require__.d(__webpack_exports__, "Scheduler", function() { return scheduler_Scheduler; });





function hot(marbles, values, error) {
    return new hot_observable_HotObservable(stripAlignmentChars(marbles), values, error);
}
function cold(marbles, values, error) {
    return new cold_observable_ColdObservable(stripAlignmentChars(marbles), values, error);
}
function time(marbles) {
    return scheduler_Scheduler.get().createTime(stripAlignmentChars(marbles));
}
var dummyResult = {
    message: function () { return ''; },
    pass: true
};
expect.extend({
    toHaveSubscriptions: function (actual, marbles) {
        var sanitizedMarbles = Array.isArray(marbles) ? marbles.map(stripAlignmentChars) : stripAlignmentChars(marbles);
        scheduler_Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe(sanitizedMarbles);
        return dummyResult;
    },
    toHaveNoSubscriptions: function (actual) {
        scheduler_Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe([]);
        return dummyResult;
    },
    toBeObservable: function (actual, expected) {
        scheduler_Scheduler.get().expectObservable(actual).toBe(expected.marbles, expected.values, expected.error);
        return dummyResult;
    },
    toBeMarble: function (actual, marbles) {
        scheduler_Scheduler.get().expectObservable(actual).toBe(stripAlignmentChars(marbles));
        return dummyResult;
    },
    toSatisfyOnFlush: function (actual, func) {
        scheduler_Scheduler.get().expectObservable(actual);
        // tslint:disable:no-string-literal
        var flushTests = scheduler_Scheduler.get()['flushTests'];
        flushTests[flushTests.length - 1].ready = true;
        onFlush.push(func);
        return dummyResult;
    }
});
var onFlush = [];
beforeEach(function () { scheduler_Scheduler.init(); onFlush = []; });
afterEach(function () {
    scheduler_Scheduler.get().flush();
    while (onFlush.length > 0) {
        // @ts-ignore
        onFlush.shift()();
    }
    scheduler_Scheduler.reset();
});


/***/ }),

/***/ 0:
/*!************************!*\
  !*** multi ./index.ts ***!
  \************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\Jeb\github\jest-marbles\index.ts */"./index.ts");


/***/ }),

/***/ "expect/build/jasmineUtils":
/*!********************************************!*\
  !*** external "expect/build/jasmineUtils" ***!
  \********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_expect_build_jasmineUtils__;

/***/ }),

/***/ "jest-diff":
/*!****************************!*\
  !*** external "jest-diff" ***!
  \****************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_jest_diff__;

/***/ }),

/***/ "jest-matcher-utils":
/*!*************************************!*\
  !*** external "jest-matcher-utils" ***!
  \*************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_jest_matcher_utils__;

/***/ }),

/***/ "rxjs":
/*!***********************!*\
  !*** external "rxjs" ***!
  \***********************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs__;

/***/ }),

/***/ "rxjs/internal/testing/SubscriptionLog":
/*!********************************************************!*\
  !*** external "rxjs/internal/testing/SubscriptionLog" ***!
  \********************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs_internal_testing_SubscriptionLog__;

/***/ }),

/***/ "rxjs/internal/testing/TestScheduler":
/*!******************************************************!*\
  !*** external "rxjs/internal/testing/TestScheduler" ***!
  \******************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs_internal_testing_TestScheduler__;

/***/ })

/******/ });
});
//# sourceMappingURL=jest-marbles.js.map